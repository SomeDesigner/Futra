@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";

// Merges custom colors into the default color map
@function merge-color-maps($base-colors, $custom-colors) {
  $merged: $base-colors;

  @if meta.type-of($custom-colors) == "map" {
    @each $name, $components in $custom-colors {
      @if meta.type-of($components) == "list" or meta.type-of($components) == "color" {
        $base: list.nth($components, 1);
        $invert: list.nth($components, 2, null);
        $light: list.nth($components, 3, null);
        $dark: list.nth($components, 4, null);

        $merged: map.merge($merged, ($name: ($base, $invert, $light, $dark)));
      }
    }
  }

  @return $merged;
}

// Adjusts the lightness of a color
@function adjust-lightness($color, $amount) {
  @return color.adjust($color, $lightness: math.div($amount, 1));
}

// Calculates the luminance of a color
@function color-luminance($color) {
  @if meta.type-of($color) != "color" {
    @return 0.55;
  }

  $rgb-values: (
    "red": math.div(color.channel($color, "red", $space: rgb), 255),
    "green": math.div(color.channel($color, "green", $space: rgb), 255),
    "blue": math.div(color.channel($color, "blue", $space: rgb), 255)
  );

  @each $key, $value in $rgb-values {
    $adjusted: if($value < 0.03928, math.div($value, 12.92), math.pow(math.div(($value + 0.055), 1.055), 2.4));
    $rgb-values: map.set($rgb-values, $key, $adjusted);
  }

  @return map.get($rgb-values, "red") * 0.2126 +
         map.get($rgb-values, "green") * 0.7152 +
         map.get($rgb-values, "blue") * 0.0722;
}

// Finds an inverted color based on luminance
@function find-invert($color) {
  @return if(color-luminance($color) > 0.55, rgba(#000, 0.7), #fff);
}

// Finds a lighter variant of a color
@function find-light-color($color, $lightness: 96%) {
  @if meta.type-of($color) == "color" {
    @return color.change($color, $lightness: max($lightness, color.channel($color, "lightness", $space: hsl)));
  }

  @return null;
}

// Finds a darker variant of a color
@function find-dark-color($color, $base-lightness: 29%) {
  @if meta.type-of($color) == "color" {
    $luminance: color-luminance($color);
    $adjusted-lightness: math.round($base-lightness + math.mul(53, (0.53 - $luminance)));
    @return color.change($color, $lightness: max($base-lightness, $adjusted-lightness));
  }

  @return null;
}

// Creates an RGBA color
@function rgba-color($color, $alpha) {
  @if meta.type-of($color) != "color" {
    @return $color;
  }

  @return rgba($color, $alpha);
}

// Darkens a color
@function darken($color, $amount) {
  @if meta.type-of($color) != "color" {
    @return $color;
  }

  @return color.adjust($color, $lightness: -$amount);
}

// Lightens a color
@function lighten($color, $amount) {
  @if meta.type-of($color) != "color" {
    @return $color;
  }

  @return color.adjust($color, $lightness: $amount);
}

// Calculates color brightness
@function color-brightness($color) {
  $brightness: math.div((
    color.channel($color, "red", $space: rgb) * 299 +
    color.channel($color, "green", $space: rgb) * 587 +
    color.channel($color, "blue", $space: rgb) * 114
  ), 1000);

  @return if($brightness < 128, "dark", "bright");
}

// Checks if two colors have enough contrast
@function enough-contrast($foreground, $background) {
  $contrast: math.abs(color-luminance($foreground) - color-luminance($background));
  @return $contrast >= 0.5;
}

// Converts a string to a number
@function string-to-number($value) {
  // If the value is already a number, return it
  @if meta.type-of($value) == "number" {
    @return $value;
  }

  // Initialize variables
  $result: 0;
  $is-negative: string.slice($value, 1, 1) == "-";
  $numbers: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9
  );

  @for $i from if($is-negative, 2, 1) through string.length($value) {
    $char: string.slice($value, $i, $i);

    // Validate that $char exists in the map and default to 0 otherwise
    $digit: map.get($numbers, $char);
    @if $digit == null {
      @error "Invalid character '#{$char}' in the string. Cannot convert to a number.";
    }

    $result: $result * 10 + $digit;
  }

  // Return the final number, applying negativity if applicable
  @return if($is-negative, -$result, $result);
}
