@use "sass:meta";
@use "sass:list";
@use "../utilities/css-variables" as cv;
@use "../utilities/functions" as fn;
@use "../utilities/root-variables" as rv;
@use "../utilities/default-variables" as dv;

// Main lightness for the theme
$scheme-main-l: 100%;
$scheme-main: hsl(dv.$scheme-h, dv.$scheme-s, $scheme-main-l);

@mixin light-theme {
  // Register core theme variables
  @include cv.register-vars(
    (
      "scheme-h": dv.$scheme-h,
      "scheme-s": dv.$scheme-s,
      "scheme-main-l": $scheme-main-l,
      "background-l": 96%,
      "text-l": 29%,
      "border-l": 86%,
      "hover-color-l-delta": -5%,
      "active-color-l-delta": -10%,
      "hover-background-l-delta": -5%,
      "active-background-l-delta": -10%,
      "family-primary": rv.$family-primary,
      "family-secondary": rv.$family-secondary,
      "size-normal": rv.$size-normal,
      "speed": dv.$speed,
    )
  );

  // Colors configuration
  $no-palette: ("white", "black", "light", "dark");

  @each $name, $color in rv.$colors {
    $base: if(meta.type-of($color) == "list", list.nth($color, 1), $color);
    $invert: null;
    $light: null;
    $dark: null;

    @if meta.type-of($color) == "list" {
      @if list.length($color) > 3 {
        $invert: list.nth($color, 2);
        $light: list.nth($color, 3);
        $dark: list.nth($color, 4);
      } @else if list.length($color) > 1 {
        $invert: list.nth($color, 2);
      }
    }

    // Generate palettes
    @if list.index($no-palette, $name) != null {
      @include cv.generate-basic-palette($name, $base, $invert);
    } @else {
      @include cv.generate-color-palette($name, $base, $scheme-main-l, $invert, $light, $dark);
    }

    // Generate scheme-specific colors
    @include cv.generate-on-scheme-colors($name, $base, $scheme-main);
  }

  // Register additional shades
  @each $shade-name, $shade-value in rv.$shades {
    @include cv.register-var($shade-name, $shade-value);
  }

  // Register additional properties
  @include cv.register-hsl("shadow", rv.$shadow-color);

  // Register size variables
  @each $size, $value in rv.$sizes {
    $size-name: "size-#{list.index(rv.$sizes, $value)}";
  
    @if $value != null and $value != "" {
      @include cv.register-var($size-name, $value);
    } @else {
      @warn "Skipping custom property #{$size-name} as the value is empty.";
    }
  }
}
