@use "../utilities/css-variables" as cv;
@use "../utilities/root-variables" as rv;
@use "../utilities/mixins" as mx;

$hero-body-padding: 3rem 1.5rem !default;
$hero-body-padding-tablet: 3rem 3rem !default;
$hero-body-padding-small: 1.5rem !default;
$hero-body-padding-medium: 9rem 4.5rem !default;
$hero-body-padding-large: 18rem 6rem !default;

$hero-gradient-offsets: (
  h: 5deg,
  s: 10%,
  l: 5%
) !default;

$hero-colors: rv.$colors !default;

// Main Hero Container
.#{rv.$class-prefix}hero {
  @include cv.register-vars((
    "hero-body-padding": $hero-body-padding,
    "hero-body-padding-tablet": $hero-body-padding-tablet,
    "hero-body-padding-small": $hero-body-padding-small,
    "hero-body-padding-medium": $hero-body-padding-medium,
    "hero-body-padding-large": $hero-body-padding-large
  ));

  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: stretch;

  .#{rv.$class-prefix}navbar {
    background: none;
  }

  .#{rv.$class-prefix}tabs ul {
    border-bottom: none;
  }

  // Dynamic Color Handling
  @each $name, $pair in $hero-colors {
    &.#{rv.$class-prefix}is-#{$name} {
      @include cv.register-vars((
        "hero-h": cv.getVar($name, "", "-h"),
        "hero-s": cv.getVar($name, "", "-s"),
        "hero-background-l": cv.getVar($name, "", "-l"),
        "hero-color-l": cv.getVar($name, "", "-invert-l")
      ));

      background-color: hsl(
        cv.getVar("hero-h"),
        cv.getVar("hero-s"),
        cv.getVar("hero-background-l")
      );

      color: hsl(
        cv.getVar("hero-h"),
        cv.getVar("hero-s"),
        cv.getVar("hero-color-l")
      );

      // Bold Modifier
      &.#{rv.$class-prefix}is-bold {
        $gradient: map-merge($hero-gradient-offsets, (
          top-left: hsl(
            calc(cv.getVar("hero-h") - map-get($hero-gradient-offsets, h)),
            calc(cv.getVar("hero-s") + map-get($hero-gradient-offsets, s)),
            calc(cv.getVar("hero-background-l") + map-get($hero-gradient-offsets, l))
          ),
          middle: hsl(
            cv.getVar("hero-h"),
            cv.getVar("hero-s"),
            cv.getVar("hero-background-l")
          ),
          bottom-right: hsl(
            calc(cv.getVar("hero-h") + map-get($hero-gradient-offsets, h)),
            calc(cv.getVar("hero-s") - map-get($hero-gradient-offsets, s)),
            calc(cv.getVar("hero-background-l") - map-get($hero-gradient-offsets, l))
          )
        ));

        background-image: linear-gradient(
          141deg,
          map-get($gradient, top-left) 0%,
          map-get($gradient, middle) 71%,
          map-get($gradient, bottom-right) 100%
        );

        @include mx.responsive("until", dv.$mobile) {
          .#{rv.$class-prefix}navbar-menu {
            background-image: linear-gradient(
              141deg,
              map-get($gradient, top-left) 0%,
              currentColor 71%,
              map-get($gradient, bottom-right) 100%
            );
          }
        }
      }
    }
  }

  // Size Modifiers
  @each $size, $padding in (
    small: $hero-body-padding-small,
    medium: $hero-body-padding-medium,
    large: $hero-body-padding-large
  ) {
    &.#{rv.$class-prefix}is-#{$size} {
      @include mx.responsive("from", dv.$tablet) {
        .#{rv.$class-prefix}hero-body {
          padding: $padding;
        }
      }
    }
  }

  &.#{rv.$class-prefix}is-halfheight {
    min-height: 50vh;
  }

  &.#{rv.$class-prefix}is-fullheight {
    min-height: 100vh;

    .#{rv.$class-prefix}hero-body {
      align-items: center;
      display: flex;

      > .#{rv.$class-prefix}container {
        flex-grow: 1;
      }
    }
  }
}

// Hero Video
.#{rv.$class-prefix}hero-video {
  @extend %overlay;
  overflow: hidden;

  video {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    min-width: 100%;
    min-height: 100%;
  }

  &.#{rv.$class-prefix}is-transparent {
    opacity: 0.3;
  }

  @include mx.responsive("until", dv.$mobile) {
    display: none;
  }
}

// Hero Buttons
.#{rv.$class-prefix}hero-buttons {
  margin-top: 1.5rem;

  @include mx.responsive("until", dv.$mobile) {
    .#{rv.$class-prefix}button {
      display: flex;

      &:not(:last-child) {
        margin-bottom: 0.75rem;
      }
    }
  }

  @include mx.responsive("from", dv.$tablet) {
    display: flex;
    justify-content: center;

    .#{rv.$class-prefix}button:not(:last-child) {
      margin-inline-end: 1.5rem;
    }
  }
}

// Hero Containers
.#{rv.$class-prefix}hero-head,
.#{rv.$class-prefix}hero-foot {
  flex-grow: 0;
  flex-shrink: 0;
}

.#{rv.$class-prefix}hero-body {
  flex-grow: 1;
  flex-shrink: 0;
  padding: cv.getVar("hero-body-padding");

  @include mx.responsive("from", dv.$tablet) {
    padding: cv.getVar("hero-body-padding-tablet");
  }
}
